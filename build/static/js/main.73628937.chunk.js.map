{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73628937.chunk.js","sourcesContent":["// import React from \"react\";\n// import \"./InfoBox.css\";\n// import { Card, CardContent, Typography } from \"@material-ui/core\";\n\n// function InfoBox({ title, cases, isRed, active, total, ...props }) {\n//   return (\n//     <Card\n//       onClick={props.onClick}\n//       className={`infoBox ${active && \"infoBox--selected\"} ${\n//         isRed && \"infoBox--red\"\n//       }`}\n//     >\n//       <CardContent>\n//         <Typography className=\"infoBox__title\" color=\"textSecondary\">\n//           {title}\n//         </Typography>\n//         <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n//           {cases}\n//         </h2>\n//         <Typography className=\"infoBox__total\" color=\"textSecondary\">\n//           {total} Total\n//         </Typography>\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default InfoBox;\n\n\nimport React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;","// import React, { useEffect, useState } from \"react\";\n// import \"./LineGraph.css\";\n// import { Line } from \"react-chartjs-2\";\n// import numeral from \"numeral\";\n\n// const options = {\n//   legend: {\n//     display: false,\n//   },\n//   elements: {\n//     point: {\n//       radius: 0,\n//     },\n//   },\n//   maintainAspectRatio: false,\n//   tooltips: {\n//     mode: \"index\",\n//     intersect: false,\n//     callbacks: {\n//       label: function (tooltipItem, data) {\n//         return numeral(tooltipItem.value).format(\"+0,0\");\n//       },\n//     },\n//   },\n//   scales: {\n//     xAxes: [\n//       {\n//         type: \"time\",\n//         time: {\n//           format: \"MM/DD/YY\",\n//           tooltipFormat: \"ll\",\n//         },\n//       },\n//     ],\n\n//     yAxes: [\n//       {\n//         gridLines: {\n//           display: false,\n//         },\n//         ticks: {\n//           callback: function (value, index, values) {\n//             return numeral(value).format(\"0a\");\n//           },\n//         },\n//       },\n//     ],\n//   },\n// };\n\n// const buildChartData = (data, casesType = \"cases\") => {\n//   let chartData = [];\n//   let lastDataPoint;\n\n//   for (let date in data.cases) {\n//     if (lastDataPoint) {\n//       const newDataPoint = {\n//         x: date,\n//         y: data[casesType][date] - lastDataPoint,\n//       };\n//       chartData.push(newDataPoint);\n//     }\n//     lastDataPoint = data[casesType][date];\n//   }\n//   return chartData;\n// };\n\n// function LineGraph({ casesType = \"cases\", ...props }) {\n//   const [data, setData] = useState({});\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n//         .then((response) => response.json())\n//         .then((data) => {\n//           let chartData = buildChartData(data, \"cases\");\n//           setData(chartData);\n//         });\n//     };\n//     fetchData();\n//   }, [casesType]);\n\n//   return (\n//     <div className={props.className}>\n//       {data?.length > 0 && (\n//         <Line\n//           options={options}\n//           data={{\n//             datasets: [\n//               {\n//                 backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n//                 borderColor: \"#CC1034\",\n//                 data: data,\n//               },\n//             ],\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default LineGraph;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => (\n        <tr>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  // sortedData.sort((a, b) => {\n  //   if (a.cases > b.cases) {\n  //     return -1;\n  //   } else {\n  //     return 1;\n  //   }\n  // });\n  // return sortData;\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","// import \"./App.css\";\n// import {\n//   MenuItem,\n//   FormControl,\n//   Select,\n//   Card,\n//   CardContent,\n// } from \"@material-ui/core\";\n// import { useEffect, useState } from \"react\";\n// import InfoBox from \"./InfoBox\";\n// import Map from \"./Map\";\n// import Table from \"./Table\";\n// import { prettyPrintStat, sortData } from \"./util\";\n// import LineGraph from \"./LineGraph\";\n// import \"leaflet/dist/leaflet.css\";\n\n// function App() {\n//   const [countries, setCountries] = useState([]);\n//   const [country, setCountry] = useState(\"Worldwide\");\n//   const [countryInfo, setCountryInfo] = useState({});\n//   const [tableData, setTableData] = useState([]);\n//   const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n//   const [mapZoom, setMapZoom] = useState(3);\n//   const [mapCountries, setMapCountries] = useState([]);\n//   const [casesType, setCasesType] = useState(\"cases\");\n\n//   // STATE = how to write a variable in react\n\n//   // https://disease.sh/v3/covid-19/countries\n\n//   // USEEFFECT runs a code based on a given condition\n\n//   useEffect(() => {\n//     fetch(\"https://disease.sh/v3/covid-19/all\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setCountryInfo(data);\n//       });\n//   }, []);\n\n//   useEffect(() => {\n//     // asyn because -> send a request to a server, wait for it, do something with info\n//     const getCountriesData = async () => {\n//       await fetch(\"https://disease.sh/v3/covid-19/countries\")\n//         .then((response) => response.json())\n//         .then((data) => {\n//           const countries = data.map((country) => ({\n//             name: country.country,\n//             value: country.countryInfo.iso2,\n//           }));\n//           const sortedData = sortData(data);\n//           setTableData(sortedData);\n//           setMapCountries(data);\n//           setCountries(countries);\n//         });\n//     };\n//     getCountriesData();\n//   }, []);\n\n//   const onCountryChange = async (event) => {\n//     const countryCode = event.target.value;\n//     // setCountry(countryCode);\n\n//     const url =\n//       countryCode === \"worldwide\"\n//         ? \"https://disease.sh/v3/covid-19/all\"\n//         : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n//     await fetch(url)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         setCountry(countryCode);\n//         setCountryInfo(data);\n\n//         setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n//         setMapZoom(4);\n//       });\n//   };\n\n//   // console.log(\"Country Info >>>\", countryInfo);\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"app__left\">\n//         <div className=\"app__header\">\n//           <h1>COVID-19 TRACKER</h1>\n//           <FormControl className=\"app__dropdown\">\n//             <Select\n//               variant=\"outlined\"\n//               onChange={onCountryChange}\n//               value={country}\n//             >\n//               <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n//               {countries.map((country) => (\n//                 <MenuItem value={country.value}>{country.name}</MenuItem>\n//               ))}\n//             </Select>\n//           </FormControl>\n//         </div>\n\n//         <div className=\"app__stats\">\n//           <InfoBox\n//             isRed\n//             active={casesType === \"cases\"}\n//             onClick={(e) => setCasesType(\"cases\")}\n//             title=\"Coronavirus Cases\"\n//             cases={prettyPrintStat(countryInfo.todayCases)}\n//             total={prettyPrintStat(countryInfo.cases)}\n//           />\n//           <InfoBox\n//             isRed\n//             active={casesType === \"recovered\"}\n//             onClick={(e) => setCasesType(\"recovered\")}\n//             title=\"Recovered\"\n//             cases={prettyPrintStat(countryInfo.todayRecovered)}\n//             total={prettyPrintStat(countryInfo.recovered)}\n//           />\n//           <InfoBox\n//             isRed\n//             active={casesType === \"deaths\"}\n//             onClick={(e) => setCasesType(\"deaths\")}\n//             title=\"Deaths\"\n//             cases={prettyPrintStat(countryInfo.todayDeaths)}\n//             total={prettyPrintStat(countryInfo.deaths)}\n//           />\n//         </div>\n//         <Map\n//           casesType={casesType}\n//           center={mapCenter}\n//           zoom={mapZoom}\n//           countries={mapCountries}\n//         />\n//       </div>\n\n  /* <Card className=\"app__right\">\n  <CardContent>\n    <h3>Live cases by country</h3>\n    <Table countries={tableData} />\n    <h3 className=\"app__rightWorldwide\">Worldwide new {casesType}</h3>\n    <LineGraph casesType={casesType} className=\"app__rightLineGraph\" />\n  </CardContent>\n</Card>; */\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__rightWorldwide\">Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} className=\"app__rightLineGraph\" />\n        </CardContent>\n      </Card>\n\n      {/* <Card className=\"app__right\">\n        \n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card> */}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}